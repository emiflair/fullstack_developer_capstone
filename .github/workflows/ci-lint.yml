name: CI/CD - Continuous Integration and Deployment

on:
  push:
    branches: [ main, containerize-k8s, containerize-k8s1 ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_HOSTNAME: us.icr.io
  REGISTRY_NAMESPACE: sn-labs-emifeaustin0
  IMAGE_NAME: dealership-app

jobs:
  # Continuous Integration Jobs
  lint-python-files:
    name: Lint Python Files
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        
    - name: Lint with flake8
      run: |
        flake8 server --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 server --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  lint-javascript-files:
    name: Lint JavaScript Files
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        cd server/frontend && npm install
        cd ../database && npm install
        
    - name: Lint JavaScript
      run: |
        cd server/frontend && (npm run lint || npx eslint src --ext .js,.jsx || echo "Linting completed")
        cd ../database && (npx eslint . --ext .js || echo "Linting completed")

  # Testing Jobs
  test-python:
    name: Test Python Application
    runs-on: ubuntu-latest
    needs: lint-python-files
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd server && pip install -r requirements.txt
        
    - name: Run Django tests
      run: |
        cd server
        python manage.py test

  test-javascript:
    name: Test JavaScript Applications
    runs-on: ubuntu-latest
    needs: lint-javascript-files
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Test Frontend
      run: |
        cd server/frontend
        npm install
        npm test -- --coverage --watchAll=false
        
    - name: Test Database API
      run: |
        cd server/database
        npm install
        npm test

  # Build and Security Scan
  build-and-scan:
    name: Build Docker Image and Security Scan
    runs-on: ubuntu-latest
    needs: [test-python, test-javascript]
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_HOSTNAME }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Continuous Deployment
  deploy:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/containerize-k8s1'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Set up IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        
    - name: Login to IBM Cloud
      env:
        IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
        IBM_CLOUD_REGION: us-south
      run: |
        ibmcloud login --apikey $IBM_CLOUD_API_KEY -r $IBM_CLOUD_REGION
        
    - name: Login to Container Registry
      run: |
        ibmcloud cr login
        
    - name: Build and Push Docker image
      run: |
        docker build -t ${{ env.REGISTRY_HOSTNAME }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker tag ${{ env.REGISTRY_HOSTNAME }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY_HOSTNAME }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.REGISTRY_HOSTNAME }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
        
    - name: Set up kubectl
      run: |
        ibmcloud ks cluster config --cluster ${{ secrets.CLUSTER_NAME }}
        
    - name: Deploy to Kubernetes
      run: |
        kubectl set image deployment/dealership-app dealership-app=${{ env.REGISTRY_HOSTNAME }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        kubectl rollout status deployment/dealership-app
        kubectl get services
